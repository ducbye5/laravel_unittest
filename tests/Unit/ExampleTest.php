<?php

namespace Tests\Unit;

use Tests\TestCase;
use App\Http\Controllers\ExampleController;

class ExampleTest extends TestCase
{
    private $exampleController;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->exampleController = new ExampleController();
//        var_dump('setUp');
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
//        var_dump('tearDown');
    }

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
//        var_dump('setUpBeforeClass');
    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
//        var_dump('tearDownAfterClass');
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testBasicTest()
    {
//        var_dump('testBasicTest');
        $this->assertTrue(true);
    }

    public function testSumMethodWithValidInputShouldReturnCorrect()
    {
//        var_dump('testSumWithValidInputShouldRerunCorrect');
        $actual = $this->exampleController->sum(1, 2);
        $expect = 3;
        // sử dụng toán tứ equals, so sánh giá trị
        $this->assertEquals($expect, $actual);
    }

    public function testSubMethodWithValidInputShouldReturnCorrect()
    {
//        var_dump('testSubWithValidInputShouldRerunCorrect');
        $actual = $this->exampleController->sub(2, 1);
        $expect = 1;
        // sử dụng toán tứ ===, so sánh đối tượng
        $this->assertSame($expect, $actual);
    }
}
